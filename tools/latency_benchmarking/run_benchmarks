#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit

START=$(date +%s)
readonly START

WORKSPACE="$(git rev-parse --show-toplevel)"

BASE_OUTPUT_DIR="${WORKSPACE}/dist/tools/latency_benchmarking/output"
OUTPUT_DIR="${BASE_OUTPUT_DIR}/${START}"

NUMBER_OF_LOOKUP_KEYS_LIST="1 5 10"

DOCKER_OUTPUT_DIR="/tmp/latency_benchmarking/output"
readonly DOCKER_OUTPUT_DIR

function usage() {
  local -r -i exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  ${BASH_SOURCE[0]}
  TODO: Add usage description
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --server-address)
      SERVER_ADDRESS="$2"
      shift 2 || usage
      ;;
    --number-of-lookup-keys-list)
      NUMBER_OF_LOOKUP_KEYS_LIST="$2"
      shift
      shift
      ;;
    --extra-ghz-tags)
    EXTRA_GHZ_TAGS="$2"
      shift 2
      ;;
    -h | --help) usage 0 ;;
    *) usage ;;
  esac
done

# TODO: check server is up and running

# Create output dirs before calling bazel-debian
# If the dir is created in the docker container, we lose write permission
mkdir -p "${OUTPUT_DIR}"
IFS=' ' read -ra NUMBER_OF_LOOKUP_KEYS <<< "${NUMBER_OF_LOOKUP_KEYS_LIST}"
for N in "${NUMBER_OF_LOOKUP_KEYS[@]}"; do
  mkdir -p "${OUTPUT_DIR}/n=${N}"
done

# Mount the output dir to docker and write requests to output dir for each item in
# `NUMBER_OF_LOOKUP_KEYS_LIST`.
# This will write a json request for each NUMBER_OF_LOOKUP_KEY=N to
# dist/tools/latency_benchmarking/output/${START}/n=${N}/request.json
# shellcheck disable=SC2086
EXTRA_DOCKER_RUN_ARGS+=" --volume ${OUTPUT_DIR}:${DOCKER_OUTPUT_DIR} " \
  builders/tools/bazel-debian run //tools/latency_benchmarking:generate_requests \
  -- \
  --output-dir ${DOCKER_OUTPUT_DIR} \
  --number-of-keys-list ${NUMBER_OF_LOOKUP_KEYS_LIST}

# Iterate through the generated request.json files and call `ghz` to benchmark server at ${SERVER_ADDRESS}
for N in "${NUMBER_OF_LOOKUP_KEYS[@]}" ; do
  DIR=${OUTPUT_DIR}/n=${N}
  REQUEST_JSON="${DIR}"/request.json
  if [[ ! -f "${REQUEST_JSON}" ]]; then
    continue
  fi

  printf "Running ghz for number of keys %s\n" "${N}"
  BASE_TAGS='{"number_of_lookup_keys": "'"${N}"'"}'
  TAGS=$(jq -s 'add' <(echo "${EXTRA_GHZ_TAGS}") <(echo "${BASE_TAGS}"))
  GHZ_OUTPUT_JSON_FILE="${DIR}/ghz_output.json"
  ghz --protoset "${WORKSPACE}/dist/query_api_descriptor_set.pb" \
    -D "${REQUEST_JSON}" \
    --duration=5s \
    --skipFirst=100 \
    --concurrency=100 \
    --format=pretty \
    --tags "${TAGS}" \
    --output "${GHZ_OUTPUT_JSON_FILE}" \
    --call kv_server.v2.KeyValueService/GetValuesHttp \
    "${SERVER_ADDRESS}"
done

EXTRA_DOCKER_RUN_ARGS+=" --volume ${OUTPUT_DIR}:${DOCKER_OUTPUT_DIR} " \
  builders/tools/bazel-debian run //tools/latency_benchmarking:create_csv_summary \
  -- \
  --ghz-result-dir ${DOCKER_OUTPUT_DIR}

printf "Result in %s\n" "${OUTPUT_DIR}/summary.csv"
