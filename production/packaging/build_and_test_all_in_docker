#!/bin/bash
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


set -o pipefail
set -o errexit
set -o xtrace
export TZ=Etc/UTC
export PS4='+\tZ ' # xtrace prompt

START=$(date +%s)

trap _print_runtime EXIT

function _print_runtime() {
  local STATUS=$?
  local END
  END=$(date +%s)
  /usr/bin/env LC_ALL=en_US.UTF-8 printf "\nbuild_and_test_all_in_docker runtime: %'ds\n" $((END - START)) >/dev/stderr
  # shellcheck disable=SC2086
  exit ${STATUS}
}

VERBOSE=0
PRECOMMIT_ONLY=0
BUILD_AMI=0
WITH_SHARED_CACHE=1

function usage() {
  local exitval=${1-1}
  cat >&2 << USAGE
usage:
  $0 <options>
    --without-shared-cache       Containers will not mount ${HOME}/.cache/bazel
    --precommit-only             Run precommit then exit
    --with-ami                   Build the AMI. Default: false
    --verbose                    Enable verbose output

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
    EXTRA_DOCKER_RUN_ARGS        Additional arguments to pass to docker run invocations
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --precommit-only)
      PRECOMMIT_ONLY=1
      shift
      ;;
    --without-shared-cache)
      WITH_SHARED_CACHE=0
      CBUILD_ARGS="--without-shared-cache"
      shift
      ;;
    --presubmit)
      # no-op
      shift
      ;;
    --with-ami)
      BUILD_AMI=1
      shift
      ;;
    --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help) usage 0 ;;
    *)
      usage
      break
      ;;
  esac
done

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
WORKSPACE="${WORKSPACE-"$(readlink -f "${SCRIPT_DIR}"/../..)"}"
CBUILD="${WORKSPACE}"/builders/tools/cbuild
export CBUILD_ARGS

if [[ ${BUILD_AMI} -eq 1 ]]; then
  BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --//:instance=aws --//:platform=aws"
else
  BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --//:instance=local --//:platform=aws"
fi

function _cbuild_debian() {
  printf "=== cbuild debian action envs ===\n"
  "${CBUILD}" ${CBUILD_ARGS} --image build-debian --cmd "grep -o 'action_env.*' /etc/bazel.bazelrc" 1>/dev/stderr 2>/dev/null
  "${CBUILD}" ${CBUILD_ARGS} --image build-debian --cmd "$*"
}

if [[ ${VERBOSE} -eq 1 ]]; then
  set -o xtrace
  CBUILD_ARGS="${CBUILD_ARGS} --verbose"
fi

"${WORKSPACE}"/tools/pre-commit
if [[ ${PRECOMMIT_ONLY} -eq 1 ]]; then
  exit 0
fi

printf "==== build and test specified targets using bazel-debian ====\n"

_cbuild_debian "
trap _collect_logs EXIT
function _collect_logs() {
  local STATUS=$?
  printf 'Collecting bazel logs...\n' &>/dev/stderr
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //:collect-logs
  # shellcheck disable=SC2086
  exit ${STATUS}
}
set -o errexit
bazel ${BAZEL_STARTUP_ARGS} build ${BAZEL_EXTRA_ARGS} //components/... //public/... //tools/...
bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/aws/data_server:copy_to_dist
bazel ${BAZEL_STARTUP_ARGS} test ${BAZEL_EXTRA_ARGS} //components/... //public/...
"
"${WORKSPACE}"/builders/tools/normalize-dist

if [[ ${BUILD_AMI} -eq 1 ]]; then
  EXTRA_ARGS="--with-ami"
fi
"${SCRIPT_DIR}"/aws/build_and_test --server-image dist/debian/server_docker_image.tar ${EXTRA_ARGS}

DIST="${WORKSPACE}"/dist
if [[ -d ${DIST} ]]; then
  printf "build artifacts:\n"
  ls -lhR "${DIST}"
else
  printf "dir not found: [%s]\n" "${DIST}"
fi
