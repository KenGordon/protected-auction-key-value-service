#!/bin/bash
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit
export TZ=Etc/UTC
export PS4='+\t $(basename ${BASH_SOURCE[0]}):${LINENO} ' # xtrace prompt

START=$(date +%s)
readonly START

trap _print_runtime EXIT
function _print_runtime() {
  local -r -i STATUS=$?
  local -r -i END=$(date +%s)
  /usr/bin/env LC_ALL=en_US.UTF-8 printf "\nbuild_and_test_all_in_docker runtime: %'ds\n" $((END - START)) &>/dev/stderr
  if [[ ${STATUS} -eq 0 ]]; then
    printf "build_and_test_in_docker completed successfully\n" &>/dev/stderr
  else
    printf "Error: build_and_test_in_docker completed with status code: %s\n" "${STATUS}" &>/dev/stderr
  fi
  exit ${STATUS}
}

declare -i VERBOSE=0
VERBOSE_ARG=
declare -i PRECOMMIT_ONLY=0
declare -i SKIP_PRECOMMIT=0
INSTANCE=local
declare -a AMI_REGIONS

function usage() {
  local -r -i exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  ${BASH_SOURCE[0]} <options>
    --instance <type>            Instance can be local or aws. Default: ${INSTANCE}
    --precommit-only             Run precommit then exit
    --no-precommit               Skip precommit checks
    --verbose                    Enable verbose output

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
    EXTRA_DOCKER_RUN_ARGS        Additional arguments to pass to docker run invocations
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly SCRIPT_DIR
# shellcheck source=builders/tools/builder.sh
source "${SCRIPT_DIR}"/../../builders/tools/builder.sh

while [[ $# -gt 0 ]]; do
  case "$1" in
    --precommit-only)
      PRECOMMIT_ONLY=1
      shift
      ;;
    --no-precommit)
      SKIP_PRECOMMIT=1
      shift
      ;;
    --with-ami)
      printf -- "--with-ami flag has been removed. Instead use ${WORKSPACE}/production/packaging/aws/build_and_test.\n" &>/dev/stderr
      usage
      ;;
    --instance)
      INSTANCE="$2"
      shift
      shift
      ;;
    --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help) usage 0 ;;
    *)
      usage
      break
      ;;
  esac
done

BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --//:instance=${INSTANCE} --//:platform=aws"

if [[ ${VERBOSE} -eq 1 ]]; then
  set -o xtrace
  VERBOSE_ARG="--verbose"
  CBUILD_ARGS="${CBUILD_ARGS} --verbose"
fi

if [[ ${SKIP_PRECOMMIT} -eq 0 ]]; then
  "${WORKSPACE}"/builders/tools/pre-commit
fi
if [[ ${PRECOMMIT_ONLY} -eq 1 ]]; then
  exit 0
fi

printf "==== build and test specified targets using bazel-debian ====\n"

builder::cbuild_debian "
trap _collect_logs EXIT
function _collect_logs() {
  local -r -i STATUS=\$?
  printf 'Collecting bazel logs...\n' &>/dev/stderr
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //:collect-logs
  exit \${STATUS}
}
set -o errexit
bazel ${BAZEL_STARTUP_ARGS} build ${BAZEL_EXTRA_ARGS} //components/... //public/... //tools/...
bazel ${BAZEL_STARTUP_ARGS} test ${BAZEL_EXTRA_ARGS} --build_tests_only --test_size_filters=small //...
bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/aws/data_server:copy_to_dist
"

DIST="${WORKSPACE}"/dist
if [[ -d ${DIST} ]]; then
  printf "build artifacts:\n"
  ls -lhR "${DIST}"
else
  printf "dir not found: [%s]\n" "${DIST}"
fi
