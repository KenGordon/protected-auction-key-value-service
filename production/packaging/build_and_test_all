#!/bin/bash
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit
set -o xtrace
export PS4='+\t ' # xtrace prompt

BUILD_AMI=0
REMOVE_OUTPUT_BASE=0
PRESUBMIT=0

usage() {
  local exitval=${1-1}
  cat >&2 << USAGE
usage:
  $0 <options>
    --with-ami                    Build the AMI. Default: false
    --remove-output-base         Remove the bazel output-base dir after building

environment variables (all optional):
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
USAGE
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --with-ami)
      BUILD_AMI=1
      shift
      ;;
    --remove-output-base)
      REMOVE_OUTPUT_BASE=1
      shift
      ;;
    --presubmit)
      PRESUBMIT=1
      shift
      ;;
    -h | --help)
      usage 0
      break
      ;;
    *)
      usage
      break
      ;;
  esac
done

BAZEL_CMD="bazel ${BAZEL_STARTUP_ARGS}"

declare -a TEST_TARGETS
TEST_TARGETS+=(//components/... //public/...)
if [[ ${PRESUBMIT} -eq 0 ]]; then
  TEST_TARGETS+=(//builders/...)
fi

function __remove_output_base() {
  OUTPUT_BASE=$(${BAZEL_CMD} info output_base)
  rm -rf ${OUTPUT_BASE}
}

if [[ ${REMOVE_OUTPUT_BASE} -eq 1 ]]; then
  trap __remove_output_base EXIT
fi

printf "==== build and test specified targets ====\n"
${BAZEL_CMD} test ${BAZEL_EXTRA_ARGS} "${TEST_TARGETS[@]}"

if [[ ${PRESUBMIT} -eq 1 ]]; then
  if [[ ${BUILD_AMI} -eq 1 ]]; then
    printf "warning: --with-ami specified with --presubmit. No AMI artifacts will be generated\n"
  fi
  printf "in presubmit mode, exiting prior to building all artifacts\n"
  exit 0
fi

printf "==== build AWS Nitro image =====\n"
AWS_TARGETS="//production/packaging/aws/data_server:server_enclave_image //components/aws/proxy/source:proxy //components/aws:sqs_lambda.tar"
if [[ -n ${AWS_TARGETS} ]]; then
  ${BAZEL_CMD} build ${BAZEL_EXTRA_ARGS} ${AWS_TARGETS}
fi

WORKSPACE=$(${BAZEL_CMD} info workspace)

DIST=${WORKSPACE}/dist
mkdir -p ${DIST}
chmod 770 ${DIST}

cp -p bazel-bin/production/packaging/aws/data_server/*.{eif,json} ${DIST}
cp -p bazel-bin/components/aws/proxy/source/proxy ${DIST}
cp components/aws/push_sqs ${DIST}
chmod 644 ${DIST}/server_enclave_image.{eif,json} ${DIST}/proxy
chmod 755 ${DIST}/push_sqs

printf "To push a newer version of SQS lambda, run ${DIST}/push_sqs\n"

if [[ ${BUILD_AMI} -eq 1 ]]; then
  printf "==== build AWS AMI =====\n"
  packer build -var=distribution_dir=${DIST} -var=workspace=${WORKSPACE} ${WORKSPACE}/production/packaging/aws/data_server/ami/image.pkr.hcl
fi
