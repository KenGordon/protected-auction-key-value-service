#!/usr/bin/env bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit

IMAGE="build-debian"
declare -r -A IMAGE_LIST=(
  [build-debian]="privacysandbox/builders/build-debian:bazel_build_image"
  [build-amazonlinux2]="privacysandbox/builders/build-amazonlinux2:bazel_build_image"
)

usage() {
  local exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 <options>
    --cmd                      Command(s) to execute within the docker container, via \`bash -c\`
    --image                    Image name for the build runtime. Valid names:
    --without-shared-cache     Use a container-local cache
    --without-embedded-docker  Enable docker client within container
USAGE

  for elem in "${!IMAGE_LIST[@]}"
  do
    if [[ ${IMAGE} == "${elem}" ]]; then
      local EXTRA=" (default)"
    fi
    printf "                    *  %s%s\n" "${elem}" "${EXTRA}" &>/dev/stderr
  done

  cat &>/dev/stderr << USAGE

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    AWS_ACCESS_KEY_ID            AWS auth token
    AWS_SECRET_ACCESS_KEY        AWS auth token
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

WITH_SHARED_CACHE=1
WITH_DOCKER_SOCK=1

while [[ $# -gt 0 ]]; do
  case "$1" in
    --cmd)
      CMD="$2"
      shift
      shift
      ;;
    --image)
      IMAGE="$2"
      shift
      shift
      ;;
    --without-shared-cache)
      WITH_SHARED_CACHE=0
      shift
      ;;
    --without-embedded-docker)
      WITH_DOCKER_SOCK=0
      shift
      ;;
    -h | --help)
      usage 0
      break
      ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage
      break
      ;;
  esac
done

if [[ -z ${IMAGE} ]]; then
  printf -- "error: --image must be specified\n" &>/dev/stderr
  usage 1
fi
readonly IMAGE_TAGGED=${IMAGE_LIST[${IMAGE}]}
if [[ -z ${IMAGE_TAGGED} ]]; then
  printf -- "error: image [%s] not recognized\n" "${IMAGE}" &>/dev/stderr
  usage 1
fi

SCRIPT_DIR="$(dirname $(readlink -f "$0"))"
WORKSPACE="${WORKSPACE-"$(readlink -f "${SCRIPT_DIR}"/../..)"}"
readonly BUILDER_DIR="${WORKSPACE}/builders/${IMAGE}"

# build container image and load it into the local docker client
if ! docker image inspect ${IMAGE_TAGGED} &>/dev/null; then
  tar --create --dereference --gzip --directory=${WORKSPACE}/builders/${IMAGE} . |
  docker build - --tag ${IMAGE_TAGGED}
fi

declare -a DOCKER_RUN_ARGS
DOCKER_RUN_ARGS+=(
  "--rm"
  "--entrypoint=/bin/bash"
  "--volume ${WORKSPACE}:/src/workspace"
  "--workdir /src/workspace"
)

if [[ -n ${AWS_ACCESS_KEY_ID} ]]; then
  DOCKER_RUN_ARGS+=(
    "--env AWS_ACCESS_KEY_ID"
    "--env AWS_SECRET_ACCESS_KEY"
  )
fi
if [[ ${WITH_SHARED_CACHE} -eq 1 ]]; then
  DOCKER_RUN_ARGS+=(
    "--volume ${HOME}/.cache/bazel:/root/.cache/bazel"
  )
fi
if [[ ${WITH_DOCKER_SOCK} -eq 1 ]]; then
  DOCKER_RUN_ARGS+=(
    "--volume /var/run/docker.sock:/var/run/docker.sock"
  )
fi
if [[ -n ${BAZEL_EXTRA_ARGS} ]]; then
  DOCKER_RUN_ARGS+=(
    "--env BAZEL_EXTRA_ARGS"
  )
fi
if [[ -n ${BAZEL_STARTUP_ARGS} ]]; then
  DOCKER_RUN_ARGS+=(
    "--env BAZEL_STARTUP_ARGS"
  )
fi
if [[ -t 1 ]]; then
  # stdout is open, assume it's an interactive tty session
  DOCKER_RUN_ARGS+=(
    "--interactive"
    "--tty"
  )
fi

set -o xtrace
if [[ -z ${CMD} ]]; then
  docker run \
  ${DOCKER_RUN_ARGS[@]} \
  ${IMAGE_TAGGED}
else
  printf "executing [%s] using image [%s]:\n\n" "${CMD}" "${IMAGE_TAGGED}" &>/dev/stderr
  docker run \
    ${DOCKER_RUN_ARGS[@]} \
    ${IMAGE_TAGGED} \
    -c "$CMD"
fi
