#!/bin/bash

# Generate a system bazelrc file
# Designed to be executed when generating a container image, for example from Dockerfile.
# For info on bazelrc files, refer to https://bazel.build/run/bazelrc?hl=en.

set -o pipefail
set -o errexit

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 <options>
    --user-root  <dir>      Name of bazel user-root directory (within bazel cache dir)
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --user-root)
      USER_ROOT="$2"
      shift
      shift
      ;;
    -h | --help) usage 0 ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage
      break
      ;;
  esac
done

if [[ -z ${USER_ROOT} ]]; then
  printf -- "error: --user-root must be specified\n" &>/dev/stderr
  usage 1
fi

function _get_toolchains_hash() {
    {
      # emit versions of all tools relevant to builds
      clang --version
      /usr/bin/python3 --version
    } | sha256sum | cut --delimiter=" " --fields=1
}

readonly BAZELRC="/etc/bazel.bazelrc"
readonly BAZEL_ROOT=/bazel_root
readonly BAZEL_OUTPUT_USER_ROOT="${BAZEL_ROOT}/${USER_ROOT}"
mkdir -p "${BAZEL_OUTPUT_USER_ROOT}"

printf "generating %s\n" "${BAZELRC}"

cat <<BAZELRC >"${BAZELRC}"
startup --output_user_root="${BAZEL_OUTPUT_USER_ROOT}"
# set a variable based on the hash of all build tool dependencies other than bazel itself
# primarily to avoid spurious cache hits for distinct sets of toolchains
build --action_env=TOOLCHAINS_HASH=$(_get_toolchains_hash)
BAZELRC
