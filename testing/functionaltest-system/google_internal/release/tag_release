#!/usr/bin/env bash

set -o errexit
set -o pipefail

DRY_RUN=0
WORKSPACE="${WORKSPACE-"$(git rev-parse --show-toplevel)"}"

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 <options>
    --dry-run     Prepare and validate release tagging without making changes.

environment variables (all optional):
  WORKSPACE       Absolute path to the bazel repo root
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --dry-run)
      DRY_RUN=1
      shift
      ;;
    -h | --help)
      usage 0
      break
      ;;
    *)
      usage
      break
      ;;
  esac
done

function __assert_branch_version() {
  local _BRANCH="$1"
  local _VER="$2"
  local _MAJ_MIN="${_VER%.*}"

  if [[ ${_BRANCH} == "main" ]]; then
    printf "Tagging release [main] branch\n"
    return 0
  fi
  if [[ ${_BRANCH} =~ ^patch-${_MAJ_MIN}$ ]]; then
    printf "Tagging release [%s] branch\n" "${_BRANCH}" &>/dev/stderr
    return 0
  fi
  printf "The current branch [%s] must be 'main' or 'patch-%s'\n" "${_BRANCH}" "${_MAJ_MIN}"
  exit 1
}

function __assert_release_branch_not_exists() {
  local TAG="$1"
  if [[ -n $(git branch --list "${TAG}") ]]; then
    printf "Error: release tag [%s] already exists. Exiting\n" "${TAG}" &>/dev/stderr
    exit 1
  fi
}

function __find_and_assert_release_commit() {
  local VER="$1"
  COMMIT="$(git log --basic-regexp --grep "^Release ${VER}$" --pretty=%H)"
  if [[ -z ${COMMIT} ]]; then
    printf "Error: Release commit not found for [%s]. Exiting\n" "${VER}" &>/dev/stderr
    exit 1
  fi
  printf "%s\n" "${COMMIT}"
}

VERSION=$(cat "${WORKSPACE}"/version.txt)

CURR_BRANCH="$(git branch --show-current)"
__assert_branch_version "${CURR_BRANCH}" "${VERSION}"

printf "Refreshing local repo from origin\n"
git fetch origin --force

RELEASE_TAG="v${VERSION}"
RELEASE_BRANCH="release-${VERSION}"
__assert_release_branch_not_exists "${RELEASE_BRANCH}"

RELEASE_COMMIT="$(__find_and_assert_release_commit "${VERSION}")"
printf "Tagging commit [%s] as tag [%s], branch [%s]\n" "${RELEASE_COMMIT}" "${RELEASE_TAG}" "${RELEASE_BRANCH}"

if [[ $DRY_RUN -eq 1 ]]; then
  printf "DRY RUN: exiting\n"
  exit
fi

# create release tag ${RELEASE_TAG}
git tag --annotate "${RELEASE_TAG}" -m "Release ${VERSION}" "${RELEASE_COMMIT}"
git branch "${RELEASE_TAG}" "${RELEASE_BRANCH}"

cat << EOF
Run the following command to push the release tag and branch to the gerrit repo:

  git push origin ${RELEASE_TAG} ${RELEASE_BRANCH}

EOF
