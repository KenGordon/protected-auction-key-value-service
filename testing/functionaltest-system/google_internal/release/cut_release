#!/usr/bin/env bash

set -o errexit
set -o pipefail

declare -i FORCE=0
declare -i DRY_RUN=0

RELEASE_TOOLS_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly RELEASE_TOOLS_DIR
declare -r TOOLS_DIR="${RELEASE_TOOLS_DIR}"/../../builders/tools
# shellcheck disable=SC1091
source "${TOOLS_DIR}"/builder.sh

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 <options>
    --dry-run     Print incremental changelog then exit. Skips all assertions.
    --force       Skip all assertions. WARNING: use very sparingly, and only for testing

environment variables (all optional):
  WORKSPACE       Absolute path to the bazel repo root
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --force)
      FORCE=1
      shift
      ;;
    --dry-run)
      DRY_RUN=1
      shift
      ;;
    -h | --help)
      usage 0
      break
      ;;
    *)
      usage
      break
      ;;
  esac
done


BRANCH_TYPE="unknown"
STRIP_COMMIT_LINKS="${RELEASE_TOOLS_DIR}"/strip_commit_links

function __determine_branch_type() {
  local BRANCH="$1"
  if [[ ${BRANCH} == "main" ]]; then
    printf "Cutting release from [main]\n" > /dev/stderr
    BRANCH_TYPE="main"
    return 0
  fi
  if [[ ${BRANCH} =~ ^patch-[[:digit:]][.][[:digit:]]$ ]]; then
    printf "Cutting release from patch branch [%s]\n" "${BRANCH}" > /dev/stderr
    BRANCH_TYPE="patch"
    return 0
  fi
  printf "The current branch [%s] must be 'main' or 'patch-x.y' (where x and y are integers)\n" "${BRANCH}" &>/dev/stderr
  if [[ ${FORCE} -eq 0 ]] && [[ ${DRY_RUN} -eq 0 ]]; then
    exit 1
  fi
}

function __assert_local_remote_heads_match() {
  LOCAL_HEAD=$(git rev-parse HEAD)
  REMOTE_HEAD=$(git rev-parse origin/main)

  if [[ ${LOCAL_HEAD} != "${REMOTE_HEAD}" ]]; then
    printf "The local HEAD [%s] and remote HEAD [%s] differ. Exiting.\n" "${LOCAL_HEAD}" "${REMOTE_HEAD}" &>/dev/stderr
    exit 1
  fi
}

function __exit_for_uncommited_changes() {
  printf "Your local repo has uncommitted changes. Exiting\n" &>/dev/stderr
  exit 1
}

function __assert_no_uncommited_changes() {
  git update-index --refresh &>/dev/null || __exit_for_uncommited_changes
  git diff-index --quiet HEAD -- || __exit_for_uncommited_changes
}

function __determine_version_bump() {
  # collect version bump for this release
  local -r TMPDIR="$(mktemp --directory --tmpdir="${WORKSPACE}")"
  local -r TMPDIRNAME="$(basename "${TMPDIR}")"
  local -r MANIFEST="${TMPDIR}"/manifest.json
  printf "{}\n" > "${MANIFEST}"
  # prepend arbitrary PREFIX to version to ensure major > 0
  # (this is necessary as commit-and-tag-version treats feat the same as fix for version < 1.x)
  local -r -i PREFIX=5
  sed --in-place=.real "s/^/${PREFIX}/" "${WORKSPACE}"/version.txt
  "${RELEASE_TOOLS_DIR}"/commit-and-tag-version --silent --bumpFiles "${TMPDIRNAME}"/manifest.json --skip.changelog=true --skip.commit=true --skip.tag=true > /dev/null
  # reinstate version.txt, and strip arbitrary PREFIX from returned version
  mv "${WORKSPACE}"/version.txt.real "${WORKSPACE}"/version.txt
  grep -oP "\d+\.\d+.\d+" "${MANIFEST}" | sed "s/^${PREFIX}//"
  rm -rf "${TMPDIR}"
}

# cut a release using the specified version
function __cut_release() {
  declare -r VERSION="$1"
  "${RELEASE_TOOLS_DIR}"/commit-and-tag-version --skip.commit=true --skip.tag=true --release-as "${VERSION}"
}

function __collect_changelog() {
  declare -r VERSION="$1"
  # generate changelog for this release
  # awk: collect the changelog between the two --- markers
  "${RELEASE_TOOLS_DIR}"/commit-and-tag-version --release-as="${VERSION}" --dry-run --silent \
    | awk '/^---/ {f = !f; next} f == 1 {print}' \
    | sed --file "${STRIP_COMMIT_LINKS}"
}

CURR_BRANCH="$(git branch --show-current)"
__determine_branch_type "${CURR_BRANCH}"

if [[ $FORCE -eq 0 ]] && [[ $DRY_RUN -eq 0 ]]; then
  if [[ ${BRANCH_TYPE} == main ]]; then
    __assert_local_remote_heads_match
  fi
  __assert_no_uncommited_changes
fi

printf "Processing branch type [%s]\n" "${BRANCH_TYPE}"

NEW_VERSION="$(__determine_version_bump)"
printf "new version: %s\n" "${NEW_VERSION}"

TMP_LATEST_RELEASE_MD=$(mktemp)
__collect_changelog "${NEW_VERSION}" >"${TMP_LATEST_RELEASE_MD}"
printf "\n\n==== begin release changelog ====\n"
cat "${TMP_LATEST_RELEASE_MD}"
printf "==== end release changelog ====\n\n"

if [[ $DRY_RUN -eq 1 ]]; then
  printf "DRY RUN: exiting\n" &>/dev/stderr
  exit
fi

__cut_release "${NEW_VERSION}"

VERSION=$(cat "${WORKSPACE}"/version.txt)
if [[ ${NEW_VERSION} != "${VERSION}" ]]; then
  printf "Unexpected mismatch in versions: [%s] vs [%s]\n" "${NEW_VERSION}" "${VERSION}" &>/dev/stderr
  exit 1
fi

readonly LATEST_RELEASE_MD="${WORKSPACE}"/google_internal/LATEST_RELEASE.md
mv "${TMP_LATEST_RELEASE_MD}" "${LATEST_RELEASE_MD}"
TMP_COMMIT_MSG=$(mktemp)
# tidy up the commit message
{
  sed 's/^## \([[:digit:]]\)/Release \1/' "${LATEST_RELEASE_MD}"
  printf '\nBug: N/A\n'
} >"${TMP_COMMIT_MSG}"
# download and execute gerrit commit-msg hook, which explicitly adds a gerrit Change-Id trailer to the specified file
/usr/bin/env bash <(curl --silent --location https://gerrit-review.googlesource.com/tools/hooks/commit-msg) "${TMP_COMMIT_MSG}"

# tidy up the changelog
sed --in-place --file "${STRIP_COMMIT_LINKS}" "${WORKSPACE}"/CHANGELOG.md

declare -a -r UPDATED_FILES=(
  "${WORKSPACE}"/{version.txt,CHANGELOG.md}
  "${LATEST_RELEASE_MD}"
)
git add "${UPDATED_FILES[@]}"

# add full changelog, using incremental changelog as commit comment
if [[ ${BRANCH_TYPE} == main ]]; then
  PRERELEASE_BRANCH="prerelease-${VERSION}"
  git switch --force-create "${PRERELEASE_BRANCH}"

  printf "\nRelease commit branch: %s\n\n" "${PRERELEASE_BRANCH}"
fi

git commit --no-verify --file "${TMP_COMMIT_MSG}" "${UPDATED_FILES[@]}"

cat << EOF

Release notes in: ${LATEST_RELEASE_MD}

To push this commit into gerrit, execute:
  git push origin HEAD:refs/for/${CURR_BRANCH}

EOF
